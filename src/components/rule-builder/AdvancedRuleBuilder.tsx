import React,{useMemo,useState} from 'react'; import { Plus,CheckCircle2,Circle } from 'lucide-react'; import Button from '@/components/ui/button'; import { Card,CardContent,CardHeader,CardTitle } from '@/components/ui/card'; import { Input } from '@/components/ui/input'; import { Label } from '@/components/ui/label'; import { Select,SelectContent,SelectItem,SelectTrigger,SelectValue } from '@/components/ui/select'; import { Switch } from '@/components/ui/switch'; import { Dialog,DialogContent,DialogHeader,DialogTitle,DialogTrigger } from '@/components/ui/dialog'; import { Badge } from '@/components/ui/badge'; import RuleCard from './ui/RuleCard'; import OperatorPill from './ui/OperatorPill'; import { ALL_FIELDS } from './data/catalog'; import { CONFLICT_POLICIES,INDIA_HOLIDAY_CALENDARS,INDIA_TIMEZONES } from './data/constants'; import { DEFAULT_GROUP,seedRule } from './data/defaults'; import { evaluateFilters,evalGroup,computePoints,lintFormula } from './utils/eval'; export default function AdvancedRuleBuilder(){const[campaignName,setCampaignName]=useState('VIP Weekend Purchase Rewards'); const[tz,setTz]=useState('Asia/Kolkata'); const[holidayCal,setHolidayCal]=useState('india_national'); const[conflictPolicy,setConflictPolicy]=useState('allow_all'); const[budget,setBudget]=useState({perUserDailyPoints:0,perCampaignMonthlyPoints:0,perCampaignCouponCap:0,hardCaps:false}); const[filters,setFilters]=useState({dateRange:{enabled:false,start:'',end:''},geo:{operator:'ALL',zone:[],region:[],tty:[],pincode:[]},product:{operator:'ALL',product_group:[],category:[],sub_category:[],product_name:[],sub_brand:[],sku_code:[],pack_volume:[]}}); const[rules,setRules]=useState([seedRule()]); const[publishState,setPublishState]=useState('draft'); const knownFields=useMemo(()=>ALL_FIELDS.map((f:any)=>f.field),[]); const updateRule=(id:string,updater:(r:any)=>any)=>setRules(rs=>rs.map(r=>r.id===id?updater({...r}):r)); const addRule=()=>setRules(rs=>[...rs,{id:crypto.randomUUID(),name:'New Rule',expanded:true,tree:DEFAULT_GROUP('ALL'),effects:[],elseEffects:[]}]); const removeRule=(id:string)=>setRules(rs=>rs.filter(r=>r.id!==id)); function validateCampaign(){const errors:string[]=[]; for(const rule of rules){ if(!rule.tree||!Array.isArray(rule.tree.children)||rule.tree.children.length===0){errors.push(`${rule.name}: must have at least one condition or group`)} const walk=(n:any)=>{if(n.type==='group'){ if(n.operator==='NOT'&&n.children.length!==1){errors.push(`${rule.name}: NOT groups must have exactly one child`)} n.children.forEach(walk)} else {const meta=ALL_FIELDS.find((f:any)=>f.field===n.field); if(!meta)errors.push(`${rule.name}: Unknown field ${n.field}`); if(['BETWEEN'].includes(n.operator)){ if(!Array.isArray(n.value)||n.value.length!==2)errors.push(`${rule.name}: BETWEEN requires two bounds`)} if(['IN','NOT_IN'].includes(n.operator)&&(!Array.isArray(n.value)||n.value.length===0)){errors.push(`${rule.name}: ${n.operator} requires a non-empty list`)}}}; walk(rule.tree); for(const e of [...rule.effects,...rule.elseEffects]){ if(e.type==='award_points'){const errs=lintFormula(e.formula,knownFields); if(errs.length)errors.push(`${rule.name}: formula error — ${errs.join(', ')}`)} if(e.type==='create_coupon'){if(!e.value)errors.push(`${rule.name}: coupon must have a Value`); if(!e.codeType)errors.push(`${rule.name}: coupon must specify Code type`); if(!e.validityDays&&!(e.startDate&&e.endDate))errors.push(`${rule.name}: coupon must set Validity (days or start/end)`)}} } if(!budget.perCampaignMonthlyPoints&&!budget.perUserDailyPoints&&!budget.perCampaignCouponCap){errors.push('No budgets set (recommended to avoid over-rewarding)')} return errors } const[simOpen,setSimOpen]=useState(false); const[simPayload,setSimPayload]=useState({purchase_amount:175,member_tier:'Gold',day_of_week:'Saturday',birthday_month:true,first_purchase_month:false,items_count:2,lifetime_value:50000,account_age_days:120,hour_of_day:14,is_holiday:false,event_date:'2025-09-19',zone:'North',region:'Haryana',tty:'Hisar',pincode:'125001',product_group:'topcoat',category:'Interior',sub_category:'Int. Paints Premium',product_name:'Ever Wash',sub_brand:'Calista',sku_code:'123456789012',pack_volume:'1ltr'} as any); const[simResults,setSimResults]=useState<any[]>([]); function runSimulation(){const passFilters=evaluateFilters(simPayload,filters); const results:any[]=[]; for(const rule of rules){const trace:any[]=[]; const matched=passFilters?evalGroup(rule.tree,simPayload,trace):false; let effectsOut:any[]=[]; if(matched){for(const e of rule.effects){ if(e.type==='award_points'){const pts=computePoints(e.formula,simPayload); effectsOut.push({kind:'points',name:e.name,value:pts})} else if(e.type==='create_coupon'){effectsOut.push({kind:'coupon',name:e.name,value:e.value})} else {effectsOut.push({kind:e.type,name:e.name||e.type})}}} else if(passFilters){for(const e of rule.elseEffects){ if(e.type==='award_points'){const pts=computePoints(e.formula,simPayload); effectsOut.push({kind:'points',name:e.name,value:pts})} else if(e.type==='create_coupon'){effectsOut.push({kind:'coupon',name:e.name,value:e.value})} else {effectsOut.push({kind:e.type,name:e.name||e.type})}}} results.push({ruleId:rule.id,ruleName:rule.name,matched:passFilters&&matched,effects:effectsOut,trace,passFilters})} setSimResults(results)} const errors=validateCampaign(); return(<div className='min-h-screen bg-gradient-to-b from-slate-950 via-slate-900 to-slate-900 text-slate-100'><div className='border-b bg-indigo-600 text-white'><div className='mx-auto max-w-6xl px-4 py-4 flex items-center justify-between gap-4'><div className='flex items-center gap-3'><h1 className='text-xl font-semibold'>Rule Builder</h1><Input className='w-[360px] bg-white/10 border-white/30' value={campaignName} onChange={e=>setCampaignName(e.target.value)}/></div><div className='flex items-center gap-2'><Dialog open={simOpen} onOpenChange={setSimOpen}><DialogTrigger asChild><Button variant='secondary'>Test Rules</Button></DialogTrigger><DialogContent className='max-w-4xl'><DialogHeader><DialogTitle>Test Your Rules</DialogTitle></DialogHeader><div className='grid grid-cols-3 gap-4'><Card className='col-span-1'><CardHeader><CardTitle>Payload</CardTitle></CardHeader><CardContent className='space-y-2'>{Object.keys(simPayload).map(k=>(<div key={k} className='grid grid-cols-2 items-center gap-2'><Label className='text-xs text-slate-400'>{k}</Label>{typeof simPayload[k]==='boolean'?(<Select value={String(simPayload[k])} onValueChange={v=>setSimPayload((p:any)=>({...p,[k]:v==='true'}))}><SelectTrigger><SelectValue/></SelectTrigger><SelectContent><SelectItem value='true'>true</SelectItem><SelectItem value='false'>false</SelectItem></SelectContent></Select>): typeof simPayload[k]==='number'?(<Input type='number' value={Number(simPayload[k])} onChange={e=>setSimPayload((p:any)=>({...p,[k]:Number(e.target.value)}))}/>):(<Input value={String(simPayload[k])} onChange={e=>setSimPayload((p:any)=>({...p,[k]:e.target.value}))}/>)}</div>))}<Button onClick={runSimulation} className='w-full'>Run Test</Button></CardContent></Card><Card className='col-span-2'><CardHeader><CardTitle>Results</CardTitle></CardHeader><CardContent className='space-y-3 max-h-[520px] overflow-auto'>{simResults.length===0?(<div className='text-sm text-slate-400'>Run a test to see rule matches and effects.</div>):null}{simResults.map(r=>(<div key={r.ruleId} className='rounded-md border border-slate-800 p-2'><div className='flex items-center justify-between'><div className='flex items-center gap-2'>{r.matched?<CheckCircle2 className='h-4 w-4 text-green-500'/>:<Circle className='h-4 w-4 text-slate-500'/>}<div className='font-medium'>{r.ruleName}</div></div><Badge variant={r.matched?'default':'secondary'}>{r.matched?'Matched':'Not matched'}</Badge></div><div className='mt-2 text-xs text-slate-400'>{r.passFilters?'Filters passed':'Blocked by filters'}</div><div className='mt-1 text-xs text-slate-400'>Effects: {r.effects.map((e:any)=>`${e.kind==='points'?`${e.value} pts`:e.value||e.kind}`).join(', ')||'—'}</div></div>))}</CardContent></Card></div></DialogContent></Dialog><Button onClick={()=>{const errs=validateCampaign(); if(errs.length){alert(`Fix validation errors before publishing:\n\n- ${errs.join('\n- ')}`); return} setPublishState('published'); alert('Rules saved & published.')}}>Save & Publish</Button></div></div></div><div className='mx-auto max-w-6xl px-4 py-6 grid grid-cols-3 gap-4'><Card><CardHeader><CardTitle>Campaign Settings</CardTitle></CardHeader><CardContent className='space-y-3'><div className='grid grid-cols-3 items-center gap-2'><Label>Timezone</Label><Select value={tz} onValueChange={setTz}><SelectTrigger className='col-span-2'><SelectValue/></SelectTrigger><SelectContent>{INDIA_TIMEZONES.map(z=>(<SelectItem key={z.key} value={z.key as any}>{z.label}</SelectItem>))}</SelectContent></Select></div><div className='grid grid-cols-3 items-center gap-2'><Label>Holiday Calendar</Label><Select value={holidayCal} onValueChange={setHolidayCal}><SelectTrigger className='col-span-2'><SelectValue/></SelectTrigger><SelectContent>{INDIA_HOLIDAY_CALENDARS.map(h=>(<SelectItem key={h.key} value={h.key as any}>{h.label}</SelectItem>))}</SelectContent></Select></div><div className='grid grid-cols-3 items-center gap-2'><Label>Conflict Policy</Label><Select value={conflictPolicy} onValueChange={setConflictPolicy}><SelectTrigger className='col-span-2'><SelectValue/></SelectTrigger><SelectContent>{CONFLICT_POLICIES.map(c=>(<SelectItem key={c.key} value={c.key as any}>{c.label}</SelectItem>))}</SelectContent></Select></div><div className='grid grid-cols-3 items-center gap-2'><Label>Hard Caps</Label><Switch checked={budget.hardCaps} onCheckedChange={v=>setBudget(b=>({...b,hardCaps:v}))}/></div><div className='grid grid-cols-3 items-center gap-2'><Label>User Daily Points Cap</Label><Input type='number' className='col-span-2' value={budget.perUserDailyPoints} onChange={e=>setBudget(b=>({...b,perUserDailyPoints:Number(e.target.value)}))}/></div><div className='grid grid-cols-3 items-center gap-2'><Label>Campaign Monthly Points Cap</Label><Input type='number' className='col-span-2' value={budget.perCampaignMonthlyPoints} onChange={e=>setBudget(b=>({...b,perCampaignMonthlyPoints:Number(e.target.value)}))}/></div><div className='grid grid-cols-3 items-center gap-2'><Label>Campaign Coupon Cap</Label><Input type='number' className='col-span-2' value={budget.perCampaignCouponCap} onChange={e=>setBudget(b=>({...b,perCampaignCouponCap:Number(e.target.value)}))}/></div></CardContent></Card><Card className='col-span-2'><CardHeader><CardTitle>Validation</CardTitle></CardHeader><CardContent>{(function(){const errs=errors; if(errs.length===0){return <div className='flex items-center gap-2 text-green-500'><CheckCircle2 className='h-4 w-4'/>No blocking issues</div>} return <ul className='space-y-1 text-sm'>{errs.map((e,i)=>(<li key={i} className='flex items-start gap-2'><span className='mt-0.5'>⚠️</span><span>{e}</span></li>))}</ul>})()}</CardContent></Card></div><div className='mx-auto max-w-6xl px-4 pb-6'><Card><CardHeader><CardTitle>Targeting Filters</CardTitle></CardHeader><CardContent className='space-y-6'><div className='space-y-2'><div className='flex items-center gap-3'><Switch checked={filters.dateRange.enabled} onCheckedChange={v=>setFilters(f=>({...f,dateRange:{...f.dateRange,enabled:v}}))}/><div><div className='font-medium'>Date Range</div><div className='text-xs text-slate-400'>Useful for slab-based schemes (e.g., quarterly). Toggle off for perpetual or lucky draw schemes.</div></div></div>{filters.dateRange.enabled&&(<div className='grid grid-cols-2 gap-3 pl-9'><div><Label>Start</Label><Input type='date' value={filters.dateRange.start} onChange={e=>setFilters(f=>({...f,dateRange:{...f.dateRange,start:e.target.value}}))}/></div><div><Label>End</Label><Input type='date' value={filters.dateRange.end} onChange={e=>setFilters(f=>({...f,dateRange:{...f.dateRange,end:e.target.value}}))}/></div></div>)}</div><div className='space-y-3'><div className='flex items-center justify-between'><div className='font-medium'>Geographic/User Filters</div><OperatorPill value={filters.geo.operator as any} onChange={op=>setFilters(f=>({...f,geo:{...f.geo,operator:op}}))}/></div><div className='grid grid-cols-2 md:grid-cols-4 gap-3'><div><Label>Zone</Label><Input placeholder='East, West, North, South (comma separated)' value={filters.geo.zone.join(', ')} onChange={e=>setFilters(f=>({...f,geo:{...f.geo,zone:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div><div><Label>Region (State)</Label><Input placeholder='e.g., Maharashtra, Haryana' value={filters.geo.region.join(', ')} onChange={e=>setFilters(f=>({...f,geo:{...f.geo,region:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div><div><Label>Trade TTY (Territory/District)</Label><Input placeholder='e.g., Hisar, Noida, Lucknow' value={filters.geo.tty.join(', ')} onChange={e=>setFilters(f=>({...f,geo:{...f.geo,tty:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div><div><Label>Pincode</Label><Input placeholder='Indian pincodes (comma separated)' value={filters.geo.pincode.join(', ')} onChange={e=>setFilters(f=>({...f,geo:{...f.geo,pincode:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div></div></div><div className='space-y-3'><div className='flex items-center justify-between'><div className='font-medium'>Product Filters</div><OperatorPill value={filters.product.operator as any} onChange={op=>setFilters(f=>({...f,product:{...f.product,operator:op}}))}/></div><div className='grid grid-cols-2 md:grid-cols-3 gap-3'><div><Label>Product Group</Label><Input placeholder='e.g., topcoat, primer' value={filters.product.product_group.join(', ')} onChange={e=>setFilters(f=>({...f,product:{...f.product,product_group:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div><div><Label>Category</Label><Input placeholder='e.g., Interior, Exterior' value={filters.product.category.join(', ')} onChange={e=>setFilters(f=>({...f,product:{...f.product,category:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div><div><Label>Sub-category</Label><Input placeholder='e.g., Int. Paints Premium' value={filters.product.sub_category.join(', ')} onChange={e=>setFilters(f=>({...f,product:{...f.product,sub_category:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div><div><Label>Product Name</Label><Input placeholder='e.g., Ever Wash' value={filters.product.product_name.join(', ')} onChange={e=>setFilters(f=>({...f,product:{...f.product,product_name:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div><div><Label>Sub-Brand</Label><Input placeholder='e.g., Calista, One' value={filters.product.sub_brand.join(', ')} onChange={e=>setFilters(f=>({...f,product:{...f.product,sub_brand:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div><div><Label>SKU Code</Label><Input placeholder='12-digit codes (comma separated)' value={filters.product.sku_code.join(', ')} onChange={e=>setFilters(f=>({...f,product:{...f.product,sku_code:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div><div><Label>Pack Volume</Label><Input placeholder='e.g., 1ltr, 10kg' value={filters.product.pack_volume.join(', ')} onChange={e=>setFilters(f=>({...f,product:{...f.product,pack_volume:e.target.value.split(',').map(s=>s.trim()).filter(Boolean)}}))}/></div></div></div></CardContent></Card></div><div className='mx-auto max-w-6xl px-4 space-y-4 pb-12'>{rules.map((r,i)=>(<RuleCard key={r.id} rule={r} idx={i} rulesLength={rules.length} updateRule={updateRule} removeRule={removeRule} moveUp={()=>setRules(rs=>{if(i===0)return rs; const next=[...rs]; [next[i-1],next[i]]=[next[i],next[i-1]]; return next})} moveDown={()=>setRules(rs=>{if(i===rs.length-1)return rs; const next=[...rs]; [next[i+1],next[i]]=[next[i],next[i+1]]; return next})}/>))}<div className='flex justify-center pt-2'><Button variant='outline' onClick={addRule}><span className='mr-1'>+</span> Add New Rule</Button></div></div></div>) }