import { useState } from 'react'; import Button from '@/components/ui/button'; import { Tooltip,TooltipContent,TooltipProvider,TooltipTrigger } from '@/components/ui/tooltip'; import { Filter,GitBranch,Trash2 } from 'lucide-react'; import { DEFAULT_GROUP,DEFAULT_SIMPLE } from '../data/defaults'; import OperatorPill from './OperatorPill'; import ConditionRow from './ConditionRow'; export default function GroupNode({node,onChange,onDeleteGroup,isRoot=false,depth=0}:{node:any;onChange:(n:any)=>void;onDeleteGroup:()=>void;isRoot?:boolean;depth?:number}){const[open,setOpen]=useState(true); const setOp=(op:'ALL'|'ANY'|'NOT')=>onChange({...node,operator:op}); const updateChild=(idx:number,newChild:any)=>{const next=[...node.children]; next[idx]=newChild; onChange({...node,children:next})}; const addSimple=()=>onChange({...node,children:[...node.children,DEFAULT_SIMPLE()]}); const addGroup=()=>onChange({...node,children:[...node.children,DEFAULT_GROUP('ALL')]}); const delChild=(idx:number)=>onChange({...node,children:node.children.filter((_:any,i:number)=>i!==idx)}); const canAddChild=node.operator!=='NOT'||node.children.length<1; return(<div className='rounded-md border border-slate-800 p-3 space-y-2 bg-slate-950'><div className='flex items-center justify-between'><div className='flex items-center gap-2'><Button variant='ghost' size='icon' onClick={()=>setOpen(o=>!o)} title='Toggle'>{open?'▼':'▶'}</Button><OperatorPill value={node.operator} onChange={setOp}/><span className='text-xs text-slate-400'>{node.operator==='ALL'&&'All conditions must be true'}{node.operator==='ANY'&&'At least one condition must be true'}{node.operator==='NOT'&&'Negates the child condition/group'}</span></div><div className='flex items-center gap-2'>{canAddChild&&(<TooltipProvider><Tooltip><TooltipTrigger asChild><Button variant='outline' size='sm' onClick={addSimple}><Filter className='h-4 w-4 mr-1'/> Add Condition</Button></TooltipTrigger><TooltipContent>Simple condition</TooltipContent></Tooltip></TooltipProvider>)}{canAddChild&&(<TooltipProvider><Tooltip><TooltipTrigger asChild><Button variant='outline' size='sm' onClick={addGroup}><GitBranch className='h-4 w-4 mr-1'/> Add Group</Button></TooltipTrigger><TooltipContent>Nested logical group</TooltipContent></Tooltip></TooltipProvider>)}{!isRoot&&(<TooltipProvider><Tooltip><TooltipTrigger asChild><Button variant='destructive' size='sm' onClick={onDeleteGroup}><Trash2 className='h-4 w-4 mr-1'/> Delete Group</Button></TooltipTrigger><TooltipContent>Remove this group</TooltipContent></Tooltip></TooltipProvider>)}</div></div>{open&&(<div className='space-y-2'>{node.children.length===0&&(<div className='text-xs text-slate-400 border border-slate-800 rounded p-2'>No conditions yet. Add a condition or a nested group.</div>)}{node.children.map((c:any,idx:number)=>(<div key={c.id} className='space-y-2'>{c.type==='simple'?(<ConditionRow node={c} onChange={nc=>updateChild(idx,nc)} onDelete={()=>delChild(idx)}/>):(<GroupNode node={c} onChange={nc=>updateChild(idx,nc)} onDeleteGroup={()=>delChild(idx)} depth={depth+1}/>)}</div>))}</div>)}</div>)}