import { useState } from 'react'; import Button from '@/components/ui/button'; import { Badge } from '@/components/ui/badge'; import { Card,CardContent,CardHeader,CardTitle } from '@/components/ui/card'; import { Input } from '@/components/ui/input'; import { Filter,Gift,AlertCircle,Zap,Trash2 } from 'lucide-react'; import GroupNode from './GroupNode'; import EffectRow from './EffectRow'; import { DEFAULT_EFFECT,DEFAULT_GROUP } from '../data/defaults'; export default function RuleCard({rule,idx,moveUp,moveDown,updateRule,removeRule,rulesLength}:any){const[expanded,setExpanded]=useState(rule.expanded); const addEffect=()=>updateRule(rule.id,(r:any)=>({...r,effects:[...r.effects,DEFAULT_EFFECT()]})); const addElseEffect=()=>updateRule(rule.id,(r:any)=>({...r,elseEffects:[...r.elseEffects,DEFAULT_EFFECT()]})); return(<Card className='bg-card/60'><CardHeader className='flex flex-row items-center justify-between space-y-0'><div className='flex items-center gap-2'><Button variant='ghost' size='icon' onClick={()=>setExpanded(e=>!e)} title='Toggle'>{expanded?'▼':'▶'}</Button><Zap className='h-4 w-4 text-indigo-400'/><Input className='w-[320px]' value={rule.name} onChange={e=>updateRule(rule.id,(r:any)=>({...r,name:e.target.value}))}/></div><div className='flex items-center gap-1'><Button variant='ghost' size='icon' onClick={moveUp} disabled={idx===0} title='Move up'>▲</Button><Button variant='ghost' size='icon' onClick={moveDown} disabled={idx===rulesLength-1} title='Move down'>▼</Button><Button variant='ghost' size='icon' onClick={()=>removeRule(rule.id)} title='Delete rule'><Trash2 className='h-4 w-4'/></Button></div></CardHeader>{expanded&&(<CardContent className='space-y-4'><section className='space-y-2'><div className='flex items-center justify-between'><h3 className='text-sm font-medium flex items-center gap-2'><Filter className='h-4 w-4'/> Conditions</h3><Badge variant='outline'>Root Operator</Badge></div><GroupNode node={rule.tree} isRoot onChange={(n:any)=>updateRule(rule.id,(r:any)=>({...r,tree:n}))} onDeleteGroup={()=>updateRule(rule.id,(r:any)=>({...r,tree:DEFAULT_GROUP('ALL')}))}/></section><section className='space-y-2'><h3 className='text-sm font-medium flex items-center gap-2'><Gift className='h-4 w-4'/> Effects (when true)</h3><div className='space-y-2'>{rule.effects.map((e:any,i:number)=>(<EffectRow key={e.id} eff={e} onChange={(ne:any)=>updateRule(rule.id,(r:any)=>{const next=[...r.effects]; next[i]=ne; return {...r,effects:next}})} onDelete={()=>updateRule(rule.id,(r:any)=>({...r,effects:r.effects.filter((x:any)=>x.id!==e.id)}))}/>))}<Button variant='outline' onClick={addEffect}>+ Add Effect</Button></div></section><section className='space-y-2'><h3 className='text-sm font-medium flex items-center gap-2'><AlertCircle className='h-4 w-4'/> Else Effects (when false)</h3><div className='space-y-2'>{rule.elseEffects.map((e:any,i:number)=>(<EffectRow key={e.id} eff={e} onChange={(ne:any)=>updateRule(rule.id,(r:any)=>{const next=[...r.elseEffects]; next[i]=ne; return {...r,elseEffects:next}})} onDelete={()=>updateRule(rule.id,(r:any)=>({...r,elseEffects:r.elseEffects.filter((x:any)=>x.id!==e.id)}))}/>))}<Button variant='outline' onClick={addElseEffect}>+ Add Else Effect</Button></div></section></CardContent>)}</Card>)}